-- ================================================
-- Flight Plan Query Scaffolding with Complications
-- ================================================
-- Purpose: Build index cases, phase windows, and classify
--          procedures + complications into Pre/Intra/Post
-- ================================================

-- 0) Seed cohort (replace MRNs as needed)
create or replace temporary table tmp_mrn as
select column1 as PrimaryMRN
from values
    ('MRN1'),
    ('MRN2'),
    ('MRN3');

-- 0) Params (cohort window + quick name/service/category seeds)
create or replace temporary table #p as
select
  to_date(dateadd(month, -12, current_date)) as start_dt,
  current_date as end_dt,
  array_construct('%NORWOOD%','%GLENN%','%FONTAN%','%ARTERIAL SWITCH%',
                  '%TETRALOGY%','%VSD%','%AV CANAL%','%COARCT%','%VALVE%',
                  '%TRANSPLANT%') as proc_like_any,
  array_construct('PEDIATRIC CARDIAC SURGERY','CARDIAC SURGERY') as svc_names,
  array_construct('HB CARDIAC') as proc_categories   -- use if present in your PD
;

-- 1) Freeze seed encounters (from your existing temp_env)
--    Ensures a stable, reusable anchor for all downstream steps.
create or replace temporary table #enc as
select distinct EncounterKey, PrimaryMRN
from temp_env;

-- 2) All OR cases in window for those encounters (anchor on SurgicalCaseFact)
create or replace temporary table #cases as
select
  e.PrimaryMRN,
  scf.EncounterKey,
  scf.SurgicalCaseKey,
  scf.CaseDateTime            as CaseStartDts,
  scf.CaseEndDateTime         as CaseEndDts,
  scf.AnesthesiaStartDateTime as AnesStartDts,
  scf.AnesthesiaEndDateTime   as AnesEndDts,
  scf.PrimaryProcedureKey
from #enc e
join SurgicalCaseFact scf
  on scf.EncounterKey = e.EncounterKey
join #p p
  on scf.CaseDateTime >= p.start_dt
 and scf.CaseDateTime <  p.end_dt
;

-- 3) Attach procedures to each case (names/categories/services)
create or replace temporary table #case_procs as
select
  c.*,
  pb.ProcedureKey,
  pd.ProcedureName      as ProcName,
  pd.ProcedureCategory  as ProcCategory,
  pd.ServiceName        as ProcService
from #cases c
left join ProcedureBridge pb
  on pb.SurgicalCaseKey = c.SurgicalCaseKey
left join ProcedureDim pd
  on pd.ProcedureKey = pb.ProcedureKey
;

-- 4) Keep only “cardiac” cases (ANY of: name LIKE, proc category, service)
create or replace temporary table #cardiac_cases as
select cp.*
from #case_procs cp, #p p
where
      (cp.ProcName ilike any (p.proc_like_any))
   or (cp.ProcCategory is not null
       and cp.ProcCategory in (select column1 from lateral flatten(input => p.proc_categories)))
   or (cp.ProcService   is not null
       and cp.ProcService   in (select column1 from lateral flatten(input => p.svc_names)))
;

-- 5) Pick ONE primary row per SurgicalCaseKey → this IS your “index_case”
--    Priority: explicit PrimaryProcedureKey → longest op window → alphabetical tie-break
create or replace temporary table #index_case as
with ranked as (
  select
    cc.PrimaryMRN,
    cc.EncounterKey,
    cc.SurgicalCaseKey,
    coalesce(cc.AnesStartDts, cc.CaseStartDts) as OpStartDts,
    coalesce(cc.AnesEndDts,   cc.CaseEndDts)   as OpEndDts,
    cc.ProcName,
    cc.ProcCategory,
    cc.ProcService,
    cc.ProcedureKey,
    cc.PrimaryProcedureKey,
    case when cc.PrimaryProcedureKey is not null
              and cc.ProcedureKey = cc.PrimaryProcedureKey
         then 1 else 0 end as is_primary,
    datediff('minute',
             coalesce(cc.AnesStartDts, cc.CaseStartDts),
             coalesce(cc.AnesEndDts,   cc.CaseEndDts))      as op_minutes,
    row_number() over (
      partition by cc.SurgicalCaseKey
      order by
        is_primary desc,           -- explicit primary first
        op_minutes desc nulls last,
        coalesce(cc.ProcName,'~') asc
    ) as rn
  from #cardiac_cases cc
)
select
  PrimaryMRN, EncounterKey, SurgicalCaseKey,
  OpStartDts, OpEndDts,
  ProcName       as IndexProcedureName,
  ProcCategory,  ProcService
from ranked
where rn = 1
;

-- 6) Final base view = index_case + phase windows (ready for timeline joins)
create or replace view V_FP_BASE as
select
  ic.PrimaryMRN,
  ic.EncounterKey,
  ic.SurgicalCaseKey,
  ic.IndexProcedureName,
  ic.ProcCategory,
  ic.ProcService,
  ef.AdmitDateTime       as AdmitDts,
  ef.DischargeDateTime   as DischargeDts,
  ic.OpStartDts,
  ic.OpEndDts,
  coalesce(ef.AdmitDateTime, dateadd(day,-7, ic.OpStartDts))    as PreOpStartDts,
  ic.OpStartDts                                               as PreOpEndDts,
  ic.OpStartDts                                               as IntraOpStartDts,
  ic.OpEndDts                                                 as IntraOpEndDts,
  ic.OpEndDts                                                 as PostOpStartDts,
  coalesce(ef.DischargeDateTime, dateadd(day,30, ic.OpEndDts))  as PostOpEndDts,
  datediff('day', ic.OpEndDts, ef.DischargeDateTime)            as HospDaysPostOp,
  datediff('day', ef.AdmitDateTime, ef.DischargeDateTime)       as TotalLOS_Days
from #index_case ic
left join EncounterFact ef
  on ef.EncounterKey = ic.EncounterKey
;

-- Quick sanity peek
-- select * from V_FP_BASE order by PrimaryMRN, OpStartDts;
